#!/bin/bash
# terminals: Open terminals on set of machines as a series of tabs
# in a single GNOME terminal window


containsElement() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
}

PROGRAM_NAME=$(basename $0)
LOCALHOST=$(hostname -s)

# The terminal server name is a random 8 character string
TERMINAL_SERVER_NAME=dashboard.t$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)

all_hosts=("host1" "host2" "host3" "host4")

declare -A hostcolors=(\
  ["host1"]="BlackAquamarine"\
  ["host2"]="BlackBlue"\
  ["host3"]="BlackBisque"\
  ["host4"]="BlackOldLace")


declare -A hostports=(\
  ["host1"]=""\
  ["host2"]=""\
  ["host3"]="-p 2222"\
  ["host4"]="")

declare -A hostusers=(\
  ["host1"]=""\
  ["host2"]=""\
  ["host3"]=""\
  ["host4"]="m42@")


declare -A hostremoteshells=(\
  ["sleeper"]="bash"\
  ["host2"]="ksh"\
  ["host3"]="bash"\
  ["host4"]="bash")

declare -A hostremotecommand=(\
  ["sleeper"]="htop"\
  ["host2"]="top"\
  ["host3"]="top"\
  ["host4"]="top")


# Add host from all_hosts to reachable hosts if the host
# responds to a ping
reachable_hosts=()
# TODO: Try to execute the pings in parellel by using fping
for host in ${all_hosts[@]}; do
  /bin/ping -c 1 $host >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    #echo "$host is up"
    reachable_hosts+=($host)
  fi
done

# Force SSH agent to ask for a password once
# so subsequent uses of ssh do not result in
# password dialog box
if test ${#reachable_hosts[@]} -gt 1; then
  ssh ${reachable_hosts[0]} hostname -s >/dev/null 2>&1
fi


# Eval is needed to force bash to evaluate the string generated by
# expanding the value of $gnome_terminal options before executing it.
# Otherwise, quoting in the value of the $gnome_terminal_options 
# variable will not be procesed by bash.
#/usr/lib/gnome-terminal/gnome-terminal-server --app-id $TERMINAL_SERVER_NAME

gnome_terminal_options=""

for host in ${all_hosts[@]}; do
 ssh_port="${hostports[$host]}"
 ssh_user="${hostusers[$host]}"
 ssh_remoteshell="${hostremoteshells[$host]}"
 ssh_remotecmd="${hostremotecommand[$host]}"
 ssh_terminalprofile="${hostcolors[$host]}"

 termopt="--tab-with-profile='$ssh_terminalprofile'"
 termopt="$termopt -e \"ssh -t -Y $ssh_port $ssh_user$host '$ssh_remotecmd;$ssh_remoteshell'\" "
 
 gnome_terminal_options="$gnome_terminal_options $termopt"
done

echo "/usr/bin/gnome-terminal --app-id $TERMINAL_SERVER_NAME $gnome_terminal_options"
eval "/usr/bin/gnome-terminal --app-id $TERMINAL_SERVER_NAME $gnome_terminal_options"
